services:
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: nginx
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./certs:/etc/nginx/certs
    depends_on:
      - api
      - token-api
      - manufacturing-mcp
      - human-resources-mcp
    networks:
      - mcp-network

  api:
    build:
      context: ./api
      dockerfile: Dockerfile.api
    container_name: api
    expose:
      - "5000"  # Solo expone internamente, NGINX manejará el tráfico externo
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    volumes:
      - db_data:/app
    networks:
      - mcp-network

  token-api:
    build:
      context: ./token_api
      dockerfile: Dockerfile.token
    container_name: token-api
    expose:
      - "5001"
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - TOKEN_DB=${TOKEN_DB}
    volumes:
      - token_db_data:/app
    networks:
      - mcp-network

  manufacturing-mcp:
    build:
      context: .
      dockerfile: mcps/Dockerfile
      args:
        MCP_NAME: manufacturing
        MCP_PORT: 8000
        CONFIG_FILE: config.yaml
    container_name: manufacturing-mcp
    expose:
      - "8000"
    env_file:
      - .env
    environment:
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_SECURE=${MINIO_SECURE}
      - QDRANT_HOST=${QDRANT_HOST}
      - QDRANT_PORT=${QDRANT_PORT}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - API_URL=${API_URL}
      - TOKEN_API_URL=${TOKEN_API_URL}
      - MCP_PORT=8000
    depends_on:
      - api
      - token-api
      - qdrant
      - ollama
      - minio
    networks:
      - mcp-network

  human-resources-mcp:
    build:
      context: .
      dockerfile: mcps/Dockerfile
      args:
        MCP_NAME: human-resources
        MCP_PORT: 8001
        CONFIG_FILE: config.yaml
    container_name: human-resources-mcp
    expose:
      - "8001"
    env_file:
      - .env
    environment:
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_SECURE=${MINIO_SECURE}
      - QDRANT_HOST=${QDRANT_HOST}
      - QDRANT_PORT=${QDRANT_PORT}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - API_URL=${API_URL}
      - TOKEN_API_URL=${TOKEN_API_URL}
      - MCP_PORT=8001
    depends_on:
      - api
      - token-api
      - qdrant
      - ollama
      - minio
    networks:
      - mcp-network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    expose:
      - "6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - mcp-network

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - mcp-network

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    expose:
      - "8080"
    environment:
      - OLLAMA_API_BASE_URL=${OLLAMA_API_BASE_URL}
    volumes:
      - openwebui_data:/app/backend/data
    depends_on:
      - manufacturing-mcp
      - ollama
      - human-resources-mcp
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - mcp-network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: bridge

volumes:
  db_data:
  token_db_data:
  qdrant_data:
  openwebui_data:
  ollama_data:
  minio_data: