api:
  url: ${API_URL}
  token_url: ${TOKEN_API_URL}
tools:
  manufacturing:
    type: api
    minio:
      bucket: manufacturing-data
      sop_prefix: sop-pdfs/
      mes_logs_prefix: mes-logs/
    qdrant:
      collections: ["sop_cache"]
      sop_cache_ttl: 36000
    api_endpoint: /machines/
  human_resources:
    type: api
    minio:
      bucket: human-resources-data
      sop_prefix: hr-pdfs/
      mes_logs_prefix: hr-logs/
    qdrant:
      collections: ["sop_cache"]
      sop_cache_ttl: 36000
    api_endpoint: /employees/
parse_config:
  manufacturing:
    system_prompt: "You are an expert prompt parser that responds ONLY with valid JSON. Do not include explanations, markdown, or any extra text. Output must be a single JSON object parseable by json.loads()."
    parse_prompt: "Parse the user prompt: {user_prompt}. Extract: model_filters as dict {field: [values]} using default field '{default_model_field}'. Only include explicitly mentioned models (e.g., ModelA). timestamp_filters as dict {field: {'from': date, 'to': date}} using default field '{default_timestamp_field}', standardizing dates to YYYY-MM-DD. metric_filters as list of dict {'field': str, 'op': '>'|'<'|'=', 'value': num, 'logical': 'AND'|'OR'}. Example: 'compliance for ModelA from 01-01-2024 to 10-01-2024, uptime > 96' outputs {'model_filters': {'{default_model_field}': ['ModelA']}, 'timestamp_filters': {'{default_timestamp_field}': {'from': '2024-01-01', 'to': '2024-01-10'}}, 'metric_filters': [{'field': 'uptime', 'op': '>', 'value': 96, 'logical': 'AND'}]}."
    defaults:
      model_field: machine
      timestamp_field: date
  human_resources:
    system_prompt: "You are an expert prompt parser that responds ONLY with valid JSON. Do not include explanations, markdown, or any extra text. Output must be a single JSON object parseable by json.loads()."
    parse_prompt: "Parse the user prompt: {user_prompt}. Extract: model_filters as dict {field: [values]} using default field '{default_model_field}'. Only include explicitly mentioned models (e.g., 001). timestamp_filters as dict {field: {'from': date, 'to': date}} using default field '{default_timestamp_field}', standardizing dates to YYYY-MM-DD. metric_filters as list of dict {'field': str, 'op': '>'|'<'|'=', 'value': num, 'logical': 'AND'|'OR'}. Example: 'compliance for employee 001 from 01-01-2024 to 10-01-2024, hours_worked > 8' outputs {'model_filters': {'{default_model_field}': ['001']}, 'timestamp_filters': {'{default_timestamp_field}': {'from': '2024-01-01', 'to': '2024-01-10'}}, 'metric_filters': [{'field': 'hours_worked', 'op': '>', 'value': 8, 'logical': 'AND'}]}."
    defaults:
      model_field: employee_id
      timestamp_field: date
prompts_config:
  compliance_prompt: "Analyze compliance for {model}. Logs: {logs}. SOP rules: {rag_content}. Check if logs meet SOP rules. Provide a step-by-step explanation of compliance or violations, using tables if helpful. Output natural language with clear reasoning."
