api:
  url: ${API_URL}
tools:
  manufacturing:
    type: api
    minio:
      bucket: manufacturing-data
      sop_prefix: sop-pdfs/
      mes_logs_prefix: mes-logs/
    qdrant:
      collections: ["sop_cache"]
      sop_cache_ttl: 36000
    api_endpoint: /machines/
    prompt: |
      Parse the user prompt: {user_prompt}. Extract:
      - model_filters: dict {{field: [values]}} for all explicitly mentioned categorical fields (e.g., machine=ModelA, material=Aluminum, production_line=Line3).
      - timestamp_filters: dict {{field: {{'from': date, 'to': date}} or {{'specific_date': date}}}} using field '{default_timestamp_field}', standardizing dates to YYYY-MM-DD. Support ranges (e.g., 'from 2025-04-09 to 2025-04-11') and specific dates (e.g., 'on 2025-04-10').
      - metric_filters: list of dict {{'field': str, 'op': '>'|'<'|'=', 'value': num, 'logical': 'AND'|'OR'}} for numeric metrics only (e.g., temperature, vibration). Support multiple metrics with or without filters (e.g., 'temperature < 80', 'vibration > 0.5', or no filter for all numeric fields).
      Example: 'compliance for ModelA on 2025-04-10, temperature < 80, vibration > 0.5, material Aluminum' outputs {{"model_filters": {{"machine": ["ModelA"], "material": ["Aluminum"]}}, "timestamp_filters": {{"{default_timestamp_field}": {{"specific_date": "2025-04-10"}}}}, "metric_filters": [{{"field": "temperature", "op": "<", "value": 80, "logical": "AND"}}, {{"field": "vibration", "op": ">", "value": 0.5, "logical": "AND"}}]}}.
      Example: 'dataset for ModelA from 2025-04-09 to 2025-04-11, material Aluminum' outputs {{"model_filters": {{"machine": ["ModelA"], "material": ["Aluminum"]}}, "timestamp_filters": {{"{default_timestamp_field}": {{"from": "2025-04-09", "to": "2025-04-11"}}}}, "metric_filters": []}}.
    defaults:
      model_field: machine
      timestamp_field: date
  human_resources:
    type: api
    minio:
      bucket: human-resources-data
      sop_prefix: hr-pdfs/
      mes_logs_prefix: hr-logs/
    qdrant:
      collections: ["sop_cache"]
      sop_cache_ttl: 36000
    api_endpoint: /employees/
    prompt: |
      Parse the user prompt: {user_prompt}. Extract:
      - model_filters: dict {{field: [values]}} for all explicitly mentioned categorical fields (e.g., employee_id=001, role=Operator, shift=Morning, assigned_machine=ModelA, production_line=Line3, training_status=Completed).
      - timestamp_filters: dict {{field: {{'from': date, 'to': date}} or {{'specific_date': date}}}} using field '{default_timestamp_field}', standardizing dates to YYYY-MM-DD. Support ranges (e.g., 'from 2025-04-10 to 2025-04-11') and specific dates (e.g., 'on 2025-04-10').
      - metric_filters: list of dict {{'field': str, 'op': '>'|'<'|'=', 'value': num, 'logical': 'AND'|'OR'}} for numeric metrics only (e.g., hours_worked, performance_score). Support multiple metrics with or without filters (e.g., 'hours_worked > 8', 'performance_score = 90', or no filter for all numeric fields).
      Example: 'dataset for employee 001 with role Operator and shift Morning on 2025-04-10, hours_worked > 8, performance_score = 90' outputs {{"model_filters": {{"employee_id": ["001"], "role": ["Operator"], "shift": ["Morning"]}}, "timestamp_filters": {{"{default_timestamp_field}": {{"specific_date": "2025-04-10"}}}}, "metric_filters": [{{"field": "hours_worked", "op": ">", "value": 8, "logical": "AND"}}, {{"field": "performance_score", "op": "=", "value": 90, "logical": "AND"}}]}}.
      Example: 'compliance for employee 001 from 2025-04-10 to 2025-04-11, role Operator' outputs {{"model_filters": {{"employee_id": ["001"], "role": ["Operator"]}}, "timestamp_filters": {{"{default_timestamp_field}": {{"from": "2025-04-10", "to": "2025-04-11"}}}}, "metric_filters": []}}.
    defaults:
      model_field: employee_id
      timestamp_field: date
prompts:
  system_prompt: |
    You are an expert prompt parser that responds ONLY with valid JSON. Do not include explanations, markdown, or any extra text. Output must be a single JSON object parseable by json.loads(). Start with { and end with }.